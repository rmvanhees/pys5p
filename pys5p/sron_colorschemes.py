"""
This file is part of pys5p

https://github.com/rmvanhees/pys5p.git

Definition of alternative color schemes.

These schemes are developed by Paul Tol (SRON) to make graphics with your
scientific results as clear as possible, it is handy to have a palette of
colours that are:
 - distinct for all people, including colour-blind readers;
 - distinct from black and white;
 - distinct on screen and paper;
 - still match well together.

Reference
---------
   https://personal.sron.nl/~pault/

Copyright (c) 2016 SRON - Netherlands Institute for Space Research
   All Rights Reserved

License:  Standard 3-clause BSD

"""
def add_outlier_colors(cdict):
    """
    Add outlier colors to existing color map.
     - low outliers are indicated with "brown"
     - high outliers are indicated with "pink"

    """
    color_high_outliers = {
        "red": 0x72/255., "green": 0x19/255., "blue": 0x0e/255.} # brown
    color_low_outliers = {
        "red": 0xc3/255., "green": 0xa8/255., "blue": 0xd1/255.} # pink

    new_cdict = {}
    for kk in "red", "green", "blue":
        colorspec = cdict[kk]
        first_entry = (0.0, color_low_outliers[kk], color_low_outliers[kk])
        last_entry  = (1.0, color_high_outliers[kk], color_high_outliers[kk])
        new_colorspec = tuple([first_entry] + list(colorspec) + [last_entry])
        new_cdict[kk] = new_colorspec

    return new_cdict

def register_cmap_rainbow( with_outliers=False ):
    """
    Register the "Rainbow" color-map

    Parameters
    ----------
      with_outliers : add colors for outliers (default = False)
    """
    from matplotlib.pyplot import register_cmap

    cdict = {
        'red'  :  ((0., 0.472, 0.472),        (0.05, 0.326495, 0.326495),
                   (0.1, 0.269004, 0.269004), (0.15, 0.248446, 0.248446),
                   (0.2, 0.249091, 0.249091), (0.25, 0.264907, 0.264907),
                   (0.3, 0.293387, 0.293387), (0.35, 0.333451, 0.333451),
                   (0.4, 0.38447, 0.38447),   (0.45, 0.445639, 0.445639),
                   (0.5, 0.515451, 0.515451), (0.55, 0.591249, 0.591249),
                   (0.6, 0.668995, 0.668995), (0.65, 0.743408, 0.743408),
                   (0.7, 0.808638, 0.808638), (0.75, 0.859374, 0.859374),
                   (0.8, 0.892017, 0.892017), (0.85, 0.905409, 0.905409),
                   (0.9, 0.900811, 0.900811), (0.95, 0.881243, 0.881243),
                   (1., 0.850538, 0.850538)),
        'green':  ((0., 0.108932, 0.108932),  (0.05, 0.104483, 0.104483),
                   (0.1, 0.175617, 0.175617), (0.15, 0.279328, 0.279328),
                   (0.2, 0.38824, 0.38824),   (0.25, 0.486824, 0.486824),
                   (0.3, 0.56807, 0.56807),   (0.35, 0.630616, 0.630616),
                   (0.4, 0.676336, 0.676336), (0.45, 0.708384, 0.708384),
                   (0.5, 0.729695, 0.729695), (0.55, 0.741942, 0.741942),
                   (0.6, 0.744955, 0.744955), (0.65, 0.736589, 0.736589),
                   (0.7, 0.713058, 0.713058), (0.75, 0.669718, 0.669718),
                   (0.8, 0.602314, 0.602314), (0.85, 0.508679, 0.508679),
                   (0.9, 0.390894, 0.390894), (0.95, 0.257902, 0.257902),
                   (1., 0.128582, 0.128582)),
        'blue' :  ((0., 0.507614, 0.507614),  (0.05, 0.498925, 0.498925),
                   (0.1, 0.539505, 0.539505), (0.15, 0.610124, 0.610124),
                   (0.2, 0.691181, 0.691181), (0.25, 0.750447, 0.750447),
                   (0.3, 0.754119, 0.754119), (0.35, 0.696358, 0.696358),
                   (0.4, 0.604303, 0.604303), (0.45, 0.509458, 0.509458),
                   (0.5, 0.428495, 0.428495), (0.55, 0.365154, 0.365154),
                   (0.6, 0.31738, 0.31738),   (0.65, 0.281619, 0.281619),
                   (0.7, 0.254385, 0.254385), (0.75, 0.232569, 0.232569),
                   (0.8, 0.213365, 0.213365), (0.85, 0.194272, 0.194272),
                   (0.9, 0.173384, 0.173384), (0.95, 0.149967, 0.149967),
                   (1., 0.124844, 0.124844))
    }
    if with_outliers:
        register_cmap(name='Rainbow', data=add_outlier_colors(cdict))
    else:
        register_cmap(name='Rainbow', data=cdict)

def register_cmap_rainbowbands( with_outliers=False ):
    """
    Register the "RainbowBands" color-map

    Parameters
    ----------
      with_outliers : add colors for outliers (default = False)
    """
    from matplotlib.pyplot import register_cmap

    cdict = {
        'red'  :  ((0., 0.909804, 0.909804),
                   (0.0434783, 0.909804, 0.85098),
                   (0.0869565, 0.85098, 0.792157),
                   (0.130435, 0.792157, 0.729412),
                   (0.173913, 0.729412, 0.666667),
                   (0.217391, 0.666667, 0.6),
                   (0.26087, 0.6, 0.533333),
                   (0.304348, 0.533333, 0.0980392),
                   (0.347826, 0.0980392, 0.262745),
                   (0.391304, 0.262745, 0.380392),
                   (0.434783, 0.380392, 0.482353),
                   (0.478261, 0.482353, 0.305882),
                   (0.521739, 0.305882, 0.564706),
                   (0.565217, 0.564706, 0.792157),
                   (0.608696, 0.792157, 0.968627),
                   (0.652174, 0.968627, 0.968627),
                   (0.695652, 0.968627, 0.956863),
                   (0.73913, 0.956863, 0.933333),
                   (0.782609, 0.933333, 0.901961),
                   (0.826087, 0.901961, 0.862745),
                   (0.869565, 0.862745, 0.647059),
                   (0.913043, 0.647059, 0.447059),
                   (0.956522, 0.447059, 0.258824),
                   (1., 0.258824, 0.258824)),
        'green':  ((0., 0.92549, 0.92549),
                   (0.0434783, 0.92549, 0.8),
                   (0.0869565, 0.8, 0.67451),
                   (0.130435, 0.67451, 0.552941),
                   (0.173913, 0.552941, 0.435294),
                   (0.217391, 0.435294, 0.309804),
                   (0.26087, 0.309804, 0.180392),
                   (0.304348, 0.180392, 0.396078),
                   (0.347826, 0.396078, 0.490196),
                   (0.391304, 0.490196, 0.584314),
                   (0.434783, 0.584314, 0.686275),
                   (0.478261, 0.686275, 0.698039),
                   (0.521739, 0.698039, 0.788235),
                   (0.565217, 0.788235, 0.878431),
                   (0.608696, 0.878431, 0.941176),
                   (0.652174, 0.941176, 0.796078),
                   (0.695652, 0.796078, 0.654902),
                   (0.73913, 0.654902, 0.501961),
                   (0.782609, 0.501961, 0.333333),
                   (0.826087, 0.333333, 0.0196078),
                   (0.869565, 0.0196078, 0.0901961),
                   (0.913043, 0.0901961, 0.0980392),
                   (0.956522, 0.0980392, 0.0823529),
                   (1., 0.0823529, 0.0823529)),
        'blue' :  ((0., 0.984314, 0.984314),
                   (0.0434783, 0.984314, 0.890196),
                   (0.0869565, 0.890196, 0.796078),
                   (0.130435, 0.796078, 0.705882),
                   (0.173913, 0.705882, 0.619608),
                   (0.217391, 0.619608, 0.533333),
                   (0.26087, 0.533333, 0.447059),
                   (0.304348, 0.447059, 0.690196),
                   (0.347826, 0.690196, 0.74902),
                   (0.391304, 0.74902, 0.811765),
                   (0.434783, 0.811765, 0.870588),
                   (0.478261, 0.870588, 0.396078),
                   (0.521739, 0.396078, 0.529412),
                   (0.565217, 0.529412, 0.670588),
                   (0.608696, 0.670588, 0.337255),
                   (0.652174, 0.337255, 0.270588),
                   (0.695652, 0.270588, 0.211765),
                   (0.73913, 0.211765, 0.14902),
                   (0.782609, 0.14902, 0.0941176),
                   (0.826087, 0.0941176, 0.0470588),
                   (0.869565, 0.0470588, 0.054902),
                   (0.913043, 0.054902, 0.054902),
                   (0.956522, 0.054902, 0.0392157),
                   (1., 0.0392157, 0.0392157))
    }
    if with_outliers:
        register_cmap(name='RainbowBands', data=add_outlier_colors(cdict))
    else:
        register_cmap(name='RainbowBands', data=cdict)

def register_cmap_extendedrainbow( with_outliers=False ):
    """
    Register the "ExtendedRainbow" color-map

    Parameters
    ----------
      with_outliers : add colors for outliers (default = False)
    """
    from matplotlib.pyplot import register_cmap

    cdict = {
        'red'  :  ((0., 0.907917, 0.907917),
                   (0.0344828, 0.866928, 0.866928),
                   (0.0689655, 0.818142, 0.818142),
                   (0.103448, 0.764403, 0.764403),
                   (0.137931, 0.709602, 0.709602),
                   (0.172414, 0.656669, 0.656669),
                   (0.206897, 0.609481, 0.609481),
                   (0.241379, 0.54935, 0.54935),
                   (0.275862, 0.435872, 0.435872),
                   (0.310345, 0.377756, 0.377756),
                   (0.344828, 0.332155, 0.332155),
                   (0.37931, 0.305819, 0.305819),
                   (0.413793, 0.300217, 0.300217),
                   (0.448276, 0.305518, 0.305518),
                   (0.482759, 0.327705, 0.327705),
                   (0.517241, 0.350924, 0.350924),
                   (0.551724, 0.37712, 0.37712),
                   (0.586207, 0.412706, 0.412706),
                   (0.62069, 0.468295, 0.468295),
                   (0.655172, 0.54927, 0.54927),
                   (0.689655, 0.649532, 0.649532),
                   (0.724138, 0.745159, 0.745159),
                   (0.758621, 0.817818, 0.817818),
                   (0.793103, 0.865664, 0.865664),
                   (0.827586, 0.892831, 0.892831),
                   (0.862069, 0.903944, 0.903944),
                   (0.896552, 0.902764, 0.902764),
                   (0.931034, 0.892748, 0.892748),
                   (0.965517, 0.876455, 0.876455),
                   (1., 0.856718, 0.856718)),
        'green':  ((0., 0.925728, 0.925728),
                   (0.0344828, 0.847096, 0.847096),
                   (0.0689655, 0.755841, 0.755841),
                   (0.103448, 0.658185, 0.658185),
                   (0.137931, 0.561525, 0.561525),
                   (0.172414, 0.470672, 0.470672),
                   (0.206897, 0.386202, 0.386202),
                   (0.241379, 0.305214, 0.305214),
                   (0.275862, 0.296717, 0.296717),
                   (0.310345, 0.350892, 0.350892),
                   (0.344828, 0.408568, 0.408568),
                   (0.37931, 0.473557, 0.473557),
                   (0.413793, 0.542491, 0.542491),
                   (0.448276, 0.589057, 0.589057),
                   (0.482759, 0.621501, 0.621501),
                   (0.517241, 0.647784, 0.647784),
                   (0.551724, 0.671005, 0.671005),
                   (0.586207, 0.694, 0.694),
                   (0.62069, 0.71734, 0.71734),
                   (0.655172, 0.736932, 0.736932),
                   (0.689655, 0.745598, 0.745598),
                   (0.724138, 0.737349, 0.737349),
                   (0.758621, 0.710863, 0.710863),
                   (0.793103, 0.668573, 0.668573),
                   (0.827586, 0.613708, 0.613708),
                   (0.862069, 0.548162, 0.548162),
                   (0.896552, 0.472731, 0.472731),
                   (0.931034, 0.386463, 0.386463),
                   (0.965517, 0.283838, 0.283838),
                   (1., 0.13223, 0.13223)),
        'blue' :  ((0., 0.983922, 0.983922),
                   (0.0344828, 0.936145, 0.936145),
                   (0.0689655, 0.880401, 0.880401),
                   (0.103448, 0.82042, 0.82042),
                   (0.137931, 0.760802, 0.760802),
                   (0.172414, 0.704719, 0.704719),
                   (0.206897, 0.653113, 0.653113),
                   (0.241379, 0.600915, 0.600915),
                   (0.275862, 0.606725, 0.606725),
                   (0.310345, 0.661649, 0.661649),
                   (0.344828, 0.72019, 0.72019),
                   (0.37931, 0.771618, 0.771618),
                   (0.413793, 0.776166, 0.776166),
                   (0.448276, 0.738879, 0.738879),
                   (0.482759, 0.700387, 0.700387),
                   (0.517241, 0.661651, 0.661651),
                   (0.551724, 0.618533, 0.618533),
                   (0.586207, 0.563656, 0.563656),
                   (0.62069, 0.491908, 0.491908),
                   (0.655172, 0.407425, 0.407425),
                   (0.689655, 0.330669, 0.330669),
                   (0.724138, 0.281142, 0.281142),
                   (0.758621, 0.253358, 0.253358),
                   (0.793103, 0.235418, 0.235418),
                   (0.827586, 0.222664, 0.222664),
                   (0.862069, 0.20971, 0.20971),
                   (0.896552, 0.194858, 0.194858),
                   (0.931034, 0.177654, 0.177654),
                   (0.965517, 0.158118, 0.158118),
                   (1., 0.132677, 0.132677))
    }
    if with_outliers:
        register_cmap(name='ExtendedRainbow',
                      data=add_outlier_colors(cdict))
    else:
        register_cmap(name='ExtendedRainbow', data=cdict)

def register_cmap_warpedextendedrainbow( with_outliers=False ):
    """
    Register the "WrapedExtendedRainbow" color-map

    Parameters
    ----------
      with_outliers : add colors for outliers (default = False)
    """
    from matplotlib.pyplot import register_cmap

    cdict = {
        'red'  :  ((0., 0.907917, 0.907917),
                   (0.0344828, 0.79788, 0.79788),
                   (0.0689655, 0.681481, 0.681481),
                   (0.103448, 0.579864, 0.579864),
                   (0.137931, 0.419267, 0.419267),
                   (0.172414, 0.335278, 0.335278),
                   (0.206897, 0.303313, 0.303313),
                   (0.241379, 0.304713, 0.304713),
                   (0.275862, 0.331103, 0.331103),
                   (0.310345, 0.36017, 0.36017),
                   (0.344828, 0.394104, 0.394104),
                   (0.37931, 0.442028, 0.442028),
                   (0.413793, 0.509644, 0.509644),
                   (0.448276, 0.592682, 0.592682),
                   (0.482759, 0.67822, 0.67822),
                   (0.517241, 0.753624, 0.753624),
                   (0.551724, 0.809592, 0.809592),
                   (0.586207, 0.847228, 0.847228),
                   (0.62069, 0.873911, 0.873911),
                   (0.655172, 0.89165, 0.89165),
                   (0.689655, 0.899235, 0.899235),
                   (0.724138, 0.903749, 0.903749),
                   (0.758621, 0.903088, 0.903088),
                   (0.793103, 0.900161, 0.900161),
                   (0.827586, 0.895059, 0.895059),
                   (0.862069, 0.888583, 0.888583),
                   (0.896552, 0.881007, 0.881007),
                   (0.931034, 0.873189, 0.873189),
                   (0.965517, 0.86478, 0.86478),
                   (1., 0.856718, 0.856718)),
        'green':  ((0., 0.925728, 0.925728),
                   (0.0344828, 0.71902, 0.71902),
                   (0.0689655, 0.513259, 0.513259),
                   (0.103448, 0.346312, 0.346312),
                   (0.137931, 0.312196, 0.312196),
                   (0.172414, 0.404618, 0.404618),
                   (0.206897, 0.504396, 0.504396),
                   (0.241379, 0.581984, 0.581984),
                   (0.275862, 0.625347, 0.625347),
                   (0.310345, 0.65598, 0.65598),
                   (0.344828, 0.68198, 0.68198),
                   (0.37931, 0.706311, 0.706311),
                   (0.413793, 0.727344, 0.727344),
                   (0.448276, 0.740684, 0.740684),
                   (0.482759, 0.743123, 0.743123),
                   (0.517241, 0.734263, 0.734263),
                   (0.551724, 0.713861, 0.713861),
                   (0.586207, 0.684868, 0.684868),
                   (0.62069, 0.651918, 0.651918),
                   (0.655172, 0.616093, 0.616093),
                   (0.689655, 0.575936, 0.575936),
                   (0.724138, 0.535694, 0.535694),
                   (0.758621, 0.493414, 0.493414),
                   (0.793103, 0.450315, 0.450315),
                   (0.827586, 0.406371, 0.406371),
                   (0.862069, 0.360228, 0.360228),
                   (0.896552, 0.312513, 0.312513),
                   (0.931034, 0.258752, 0.258752),
                   (0.965517, 0.194154, 0.194154),
                   (1., 0.13223, 0.13223)),
        'blue' :  ((0., 0.983922, 0.983922),
                   (0.0344828, 0.857785, 0.857785),
                   (0.0689655, 0.731008, 0.731008),
                   (0.103448, 0.627404, 0.627404),
                   (0.137931, 0.622418, 0.622418),
                   (0.172414, 0.71618, 0.71618),
                   (0.206897, 0.773653, 0.773653),
                   (0.241379, 0.744543, 0.744543),
                   (0.275862, 0.694718, 0.694718),
                   (0.310345, 0.646433, 0.646433),
                   (0.344828, 0.592342, 0.592342),
                   (0.37931, 0.525811, 0.525811),
                   (0.413793, 0.448768, 0.448768),
                   (0.448276, 0.37419, 0.37419),
                   (0.482759, 0.315811, 0.315811),
                   (0.517241, 0.277905, 0.277905),
                   (0.551724, 0.256503, 0.256503),
                   (0.586207, 0.242331, 0.242331),
                   (0.62069, 0.231546, 0.231546),
                   (0.655172, 0.223219, 0.223219),
                   (0.689655, 0.215199, 0.215199),
                   (0.724138, 0.207255, 0.207255),
                   (0.758621, 0.19893, 0.19893),
                   (0.793103, 0.190388, 0.190388),
                   (0.827586, 0.181624, 0.181624),
                   (0.862069, 0.17266, 0.17266),
                   (0.896552, 0.163577, 0.163577),
                   (0.931034, 0.153908, 0.153908),
                   (0.965517, 0.143068, 0.143068),
                   (1., 0.132677, 0.132677))
    }
    if with_outliers:
        register_cmap(name='WarpedExtendedRainbow',
                      data=add_outlier_colors(cdict))
    else:
        register_cmap(name='WarpedExtendedRainbow', data=cdict)


def get_line_colors():
    """
    Alternative color scheme for qualitative data

    Defines 8 colors: Blue, Cyan, Green, Yellow, Red, Pink, Grey and Black
    Usage:
      - For 5 or more colors: use colors as defined in list
      - For 4 or less: use Blue (0), Red(4), Green(2) and Yellow(3)
    """
    return [ '#4477AA',   # blue
             '#66CCEE',   # cyan
             '#228833',   # green
             '#CCBB44',   # yellow
             '#EE6677',   # red
             '#AA3377',   # pink
             '#BBBBBB',   # grey
             '#000000' ]  # black
